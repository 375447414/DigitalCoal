%==========================================================================
%~~~~~~~~~~~~~~~~~~ooooo~~~~ooooo~~~~0~~~0~~~~ooooo~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~0~~~~~~~~0~~~~~~0o~~0~~~~0~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~0~~~~~~~~0~~~~~~0~o~0~~~~0~oo0~~~~~~~~~~~~~~~~~~~~~~~~
%~~~~~~~~~~~~~~~~~~~~0~~~~~~~~0~~~~~~0~~o0~~~~0~~~0~~~~~~~~~~~~~~~~~~~~~~~~
%-----------------ooo0------oo0oo----0---0----0oooo------------------------
%==========================================================================
clear;close all;clc
m=100;
n=100;
h=ceil(m/4.5);
pixel=4.1;
a=2;
M=m*pixel*a;
N=n*pixel*a;
H=h*pixel;
MM=m*a;
NN=n*a;
gapx=MM*pixel-M;
gapy=NN*pixel-N;
binary=zeros(MM,NN);
%>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
%============================FACE CLEAT====================================
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

%==========================================================================
%1. finding the spaced x coordinates for primary vertical face cleats, and
%then setting all the y coordinates are in the middle of the model
%==========================================================================
spacing_dist_vert=load('papersample_spacing_face.txt')'*pixel*pix;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%change!!!!
%spacing_dist_vert=load('papersample_spacing_face.txt')'*pixel;  %for yibin
xplus(1)=rand(1,1)*M;
xminus(1)=xplus(1);
SPACE=[];
for i=2:50
    space=spacing_dist_vert(randperm(size(spacing_dist_vert,1)));
    xplus(i)=xplus(i-1)+space;
    SPACE=[SPACE,space];
    if xplus(i)>M
        break
    end
end
for i=2:50
    space=spacing_dist_vert(randperm(size(spacing_dist_vert,1)));
    xminus(i)=xminus(i-1)-space;
    SPACE=[SPACE,space];
    if xminus(i)<0
        break
    end
end
xx=[fliplr(xminus(1:end-1)),xplus(2:end-1)];
y=N/2;
nr=size(xx,2);                                                             %nr is the face cleat groups number
%--------------------------------------------------------------------------
%xx=[x1,x2,...dn]; 
%the x coordinates for primary vertical face cleats
%--------------------------------------------------------------------------


%==========================================================================
%2. plotting primary vertical face cleats with assigned length and azimuth,
%and also voxelisation in first layer and plot
%==========================================================================

length_dist=load('papersample_length_face.txt');
length_dist_large=length_dist(find(length_dist>45))*pixel*pix;
length_dist=length_dist(find(length_dist>0))*pixel*pix;
%length_dist=load('papersample_length_face.txt')/2; %For Yibin%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%length_dist_large=length_dist(find(length_dist>10))*pixel*pix; %For Yibin%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%length_dist=length_dist(find(length_dist>0))*pixel*pix;  %For Yibin%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
azimuth_dist=pi/2-load('papersample_orientation_face.txt')*pi/180;
%azimuth_dist=pi/2+normrnd(0,0.03,2372,1);    %for Yibin%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%change!!!!
                                                                           
                                                                     
L=[];
X1=[];X2=[];Y1=[];Y2=[];
xtoll={};
ytoll={};
X={};
Y={};
ct_vert={};
AZIMUTH={};
RF=[];
for i=1:nr
    x=xx(i);
    azimuth=azimuth_dist(randperm(size(azimuth_dist,1),1));
    length=length_dist_large(randperm(size(length_dist_large,1),1));
    %length=abs(m*pixel/sin(azimuth)); %This is for model that face cleats
    %dont have length variety, all of them getting through
    [BINARY,x1,x2,y1,y2,bin_x,bin_y]=voxelization2d(binary(:,:,1),MM,NN,pixel,x,y,length,azimuth);
    binary(:,:,1)=binary(:,:,1)+BINARY;
    ct_vert{i}=[x,y,length,azimuth,1,i];
    %L=[L,length];
    X1=[X1,x1];
    X2=[X2,x2];
    Y1=[Y1,y1];                                                            %upper point
    Y2=[Y2,y2];                                                            %lower point
    AZIMUTH{i}=[azimuth];
    xtoll{i}=[x1,x2];   %this is for intersection calculation
    ytoll{i}=[y1,y2];
    X{i}=[x1;x2];       %this is for intersection of face and face cleats
    Y{i}=[y1;y2];        %y1 is larger than y2
    %below is for roughness
    RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1),i*ones(size(bin_x,2),1),i*ones(size(bin_x,2),1)];
    %RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1)];

    hold on
end
bin=binary((MM/2-m/2+1):(MM/2+m/2),(NN/2-n/2+1):(NN/2+n/2),1:h);
%length_vert_check=sum(sum(bin(:,:,1)))*pixel;
%length_vert_total=sum(sum(logical(~load('papersample_length_face.txt'))));



%==========================================================================
%3. Adding fractures at bottom
%3.1 under primary face cleats and voxelisation and plot
%==========================================================================
%------ADDING FRACTURES AT BOTTOM
YD=[];
XD=[];
    for i=1:nr
        %y=Y2(i)-rand(1,1)*30*pixel;
        y=Y2(i);
        x=X2(i);
        length=length_dist(randperm(size(length_dist,1),1));
        azimuth=azimuth_dist(randperm(size(azimuth_dist,1),1));
        [BINARY,x1,x2,y1,y2,bin_x,bin_y]=voxelization2d_end_down(binary(:,:,1),MM,NN,pixel,x,y,length,azimuth);
        binary(:,:,1)=binary(:,:,1)+BINARY;
        hold on
        x=(x1+x2)/2;
        y=(y1+y2)/2;
        length=sqrt((x1-x2)^2+(y1-y2)^2);
        ct_vert{i}=[ct_vert{i};x,y,length,azimuth,1,i+nr];
        
        L=[L,length];
        XD=[XD,x2];                                                        %recording the coordinates of the lower points of added bottom face cleats
        YD=[YD,y2];
        
        %X2=[X2,x2];
        %Y2=[Y2,y2];%lower point
        xtoll{i}=[xtoll{i};x1,x2];
        ytoll{i}=[ytoll{i};y1,y2];
        X{i}=[X{i};x2];
        Y{i}=[Y{i};y2];
        AZIMUTH{i}=[AZIMUTH{i};azimuth];
        
        RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1),(i+nr)*ones(size(bin_x,2),1),i*ones(size(bin_x,2),1)];
        %RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1)];

    end
bin=binary(MM/2-m/2+1:MM/2+m/2,NN/2-n/2+1:NN/2+n/2,1:h);
%length_vert_check=sum(sum(bin));


%==========================================================================
%3.2 further under added bottom cleats and voxelisation and plot
%==========================================================================
for j=1:20
    
    for i=1:nr
        if YD(i)>0
        %y=YD(i)-rand(1,1)*30*pixel;
        y=YD(i);
        x=XD(i);
        length=length_dist(randperm(size(length_dist,1),1));
        azimuth=azimuth_dist(randperm(size(azimuth_dist,1),1));
        [BINARY,x1,x2,y1,y2,bin_x,bin_y]=voxelization2d_end_down(binary(:,:,1),MM,NN,pixel,x,y,length,azimuth);
        binary(:,:,1)=binary(:,:,1)+BINARY;
        hold on
        x=(x1+x2)/2;
        y=(y1+y2)/2;
        length=sqrt((x1-x2)^2+(y1-y2)^2);
        ct_vert{i}=[ct_vert{i};x,y,length,azimuth,1,i+2*nr];
        L=[L,length];
        XD(i)=x2;
        YD(i)=y2;
        X2=[X2,x2];
        Y2=[Y2,y2];%lower point
        %xtoll{i}=[xtoll{i};x2];
        %ytoll{i}=[ytoll{i};y2];
        xtoll{i}=[xtoll{i};x1,x2];
        ytoll{i}=[ytoll{i};y1,y2];
        X{i}=[X{i};x2];
        Y{i}=[Y{i};y2];
        AZIMUTH{i}=[AZIMUTH{i};azimuth];
        
        RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1),(nr*2+i)*ones(size(bin_x,2),1),i*ones(size(bin_x,2),1)];
        %RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1)];

        else
        end
    
      
    end

end
bin=binary(MM/2-m/2+1:MM/2+m/2,NN/2-n/2+1:NN/2+n/2,1:h);
%length_vert_check=sum(sum(bin));

%==========================================================================
%4. Adding fractures at top
%4.1 over primary face cleats and voxelisation and plot
%==========================================================================
XU=[];
YU=[];
    for i=1:nr
        %y=Y1(i)+rand(1,1)*30*pixel;
        y=Y1(i);
        x=X1(i);
        length=length_dist(randperm(size(length_dist,1),1));
        azimuth=azimuth_dist(randperm(size(azimuth_dist,1),1));
        [BINARY,x1,x2,y1,y2,bin_x,bin_y]=voxelization2d_end_up(binary(:,:,1),MM,NN,pixel,x,y,length,azimuth);
        binary(:,:,1)=binary(:,:,1)+BINARY;
        hold on
        x=(x1+x2)/2;
        y=(y1+y2)/2;
        length=sqrt((x1-x2)^2+(y1-y2)^2);
        ct_vert{i}=[x,y,length,azimuth,1,i+3*nr;ct_vert{i}];
        L=[L,length];
        XU=[XU,x2];
        YU=[YU,y2];
        %X1=[X1,x2];
        %Y1=[Y1,y2];%upper point
        xtoll{i}=[x1,x2;xtoll{i}];
        ytoll{i}=[y1,y2;ytoll{i}];
        X{i}=[x2;X{i}];
        Y{i}=[y2;Y{i}];
        AZIMUTH{i}=[azimuth;AZIMUTH{i}];
       
        RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1),(nr*3+i)*ones(size(bin_x,2),1),i*ones(size(bin_x,2),1)];
        %RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1)];

    end
bin=binary(MM/2-m/2+1:MM/2+m/2,NN/2-n/2+1:NN/2+n/2,1:h);
length_vert_check=sum(sum(bin))*pixel;

%==========================================================================
%4.2 further over added upper cleats and voxelisation and plot
%==========================================================================

for j=1:20
        for i=1:nr
            if YU(i)<N
                %y=YU(i)+rand(1,1)*30*pixel;
                y=YU(i);
                x=XU(i);
                length=length_dist(randperm(size(length_dist,1),1));
                azimuth=azimuth_dist(randperm(size(azimuth_dist,1),1));
                [BINARY,x1,x2,y1,y2,bin_x,bin_y]=voxelization2d_end_up(binary(:,:,1),MM,NN,pixel,x,y,length,azimuth);
                binary(:,:,1)=binary(:,:,1)+BINARY;
                hold on
                x=(x1+x2)/2;
                y=(y1+y2)/2;
                length=sqrt((x1-x2)^2+(y1-y2)^2);
                ct_vert{i}=[x,y,length,azimuth,1,i+4*nr;ct_vert{i}];
                L=[L,length];
                XU(i)=x2;
                YU(i)=y2;
                X1=[X1,x2];
                Y1=[Y1,y2];%upper point
                xtoll{i}=[x1,x2;xtoll{i}];
                ytoll{i}=[y1,y2;ytoll{i}];
                X{i}=[x2;X{i}];
                Y{i}=[y2;Y{i}];
                AZIMUTH{i}=[azimuth;AZIMUTH{i}];
                
                RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1),(nr*4+i)*ones(size(bin_x,2),1),i*ones(size(bin_x,2),1)];
                %RF=[RF;bin_x',bin_y',ones(size(bin_x,2),1),length*ones(size(bin_x,2),1),azimuth*ones(size(bin_x,2),1)];

            else
            end
        end
       
        %length_vert_check=sum(L);
        %if length_vert_check<length_vert_total*a^2
            %break
        %end
end
%bin=binary(MM/2-m/2:MM/2+m/2-1,NN/2-n/2:NN/2+n/2-1,1:h);
bin=binary(MM/2-m/2+1:MM/2+m/2,NN/2-n/2+1:NN/2+n/2,1:h);
%length_vert_check=sum(sum(bin));



    
%==========================================================================
%5. applying aperture for first layer
%==========================================================================
%aperture_dist=load('papersample_aperture.txt');
aperture={};
aperture_mu=12.59084; aperture_sigma=0.25774;
for j=1:nr
    aperture_c=normrnd(aperture_mu,aperture_sigma,1);      %set every face group to have same aperture
    for i=1:size(ct_vert{j},1)
        aperture{j}(i,:)=aperture_c;
        %aperture{j}(i,:)=normrnd(aperture_mu,aperture_sigma,1);
        %aperture{j}(i,:)=aperture_dist(randperm(size(aperture_dist,1),1));
    end
end
RF=[];
[BINARY,RRF,RF]=aperture_3d(binary(:,:,1),ct_vert,nr,aperture,pixel,MM,NN,m,n,1);
binary(:,:,1)=binary(:,:,1)+BINARY;
bin=binary(MM/2-m/2+1:MM/2+m/2,NN/2-n/2+1:NN/2+n/2,1:h);

NIMA=[(RF(:,1:3)-1)*pixel,RF(:,4),RF(:,7)];

%==========================================================================
%6.extending the face cleats in z direction
%==========================================================================
%dip_dist=abs(normrnd(0,0.05,2401,1)); %for Yibin
dip_dist=pi/2-load('papersample_reslice_left_orientation_face.txt')*pi/180; %0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
dip_dist=dip_dist(find(dip_dist<0.78));
dip=dip_dist(randi([1,size(dip_dist,1)],1,nr))';    %??face????dip
ct_vert_top=ct_vert;
X_TOP=X;
Y_TOP=Y;
for i=2:h
    delh=(i-1)*pixel;
    length_v=abs(delh./cos(dip));
    deltz=length_v.*cos(dip);
    deltx=tan(dip).*delh;
    for j=1:nr
        X_d{j}=X{j}+deltx(j);
        Y_d{j}=Y{j};
        Z_d{j}=repmat(deltz(j),1,size(X{j},2));
        ct_vert{j}(:,1)=ct_vert_top{j}(:,1)+deltx(j);
        X{j}=X_TOP{j}+deltx(j);
        ct_vert{j}(:,5)=i;
    end
    [BINARY,rrf,rf]=aperture_3d(binary(:,:,i),ct_vert,nr,aperture,pixel,MM,NN,m,n,i);
    binary(:,:,i)=binary(:,:,i)+BINARY;
    RRF=[RRF;rrf];
    RF=[RF;rf];
end
NIMA=[NIMA;[(rf(:,1:3)-1)*pixel,rf(:,4),rf(:,7)]];
bin=binary(MM/2-m/2+1:MM/2+m/2,NN/2-n/2+1:NN/2+n/2,1:h);
%{
%------plot face cleats--------
for i=1:nr
    patch([X{i},fliplr(X_d{i})],[Y{i},fliplr(Y_d{i})],[Z{i},fliplr(Z_d{i})],'b');
    hold on
end
%}
%After above step, X, Y, Z are points at lower face, X_d,Y_d,Z_d are points
%at upper face; AZIMUTH are coorespoinding angles,ct_vert record all data;
%{
%==========================================================================
%*****FOR Yibin: finding the intersections of face cleats (only face-face),
%and numbering face
%==========================================================================

InterFF=[];
for i=1:nr
    InterXFF=(X{i}(:,1)+X_TOP{i}(:,1))/2;
    InterYFF=(Y_TOP{i}(:,1)+Y_TOP{i}(:,1))/2;
    InterFF=[InterFF;[aperture{i};aperture{i}(1)].^2*H,[aperture{i};aperture{i}(1)],InterXFF,InterYFF];
end
ff_nr=size(InterFF,1);
InterFF=[[1:ff_nr]',2*ones(ff_nr,1),InterFF,H/2*ones(ff_nr,1)];   %[intersection#, intersected fracture number, volume, aperture, x,y,z];


FRAC_F=[];
face_number=0;
for i=1:nr
    face_number=face_number+size(ct_vert{i},1);
    FRAC_F=[FRAC_F;H*aperture{i}.*ct_vert{i}(:,3),aperture{i},ct_vert{i}(:,3),i*ones(size(aperture{i},1),1),ytoll{i}];   
end
FRAC_F=[[1:face_number]',FRAC_F];    %[frac#,volume,aperture,length,face_group_#,y_range(..,..)]

for i=1:size(FRAC_F,1)
    inter1=InterFF(find(InterFF(:,6)==FRAC_F(i,6)),1);
    inter2=InterFF(find(InterFF(:,6)==FRAC_F(i,7)),1);
    FRAC_F(i,8)=inter1;
    FRAC_F(i,9)=inter2;
end
%}

%----------------------------BUTT CLEATS------------------------------------
%>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
xx_dif=xx(2:end)-xx(1:end-1);
xx_mid=xx(1:end-1)+xx_dif/2;
spacing_dist_horiz=load('segmentedsq_spacing_horiz.txt')'*pixel;
azimuth_dist=load('segmentedsq_orientation_lengthfrequency_horiz.txt')*pi/180;
length_dist=SPACE;
nr_butt=size(xx_mid,2);
for i=1:nr_butt
    yplus{i}(1)=rand(1,1)*N;
    
    for j=2:50
        yplus{i}(j)=yplus{i}(j-1)+spacing_dist_horiz(randperm(size(spacing_dist_horiz,1)));
        if yplus{i}(j)>N
            break

        end
    end
end
for i=1:nr_butt
    yminus{i}(1)=yplus{i}(1);
    for j=2:50
        yminus{i}(j)=yminus{i}(j-1)-spacing_dist_horiz(randperm(size(spacing_dist_horiz,1)));
        if yminus{i}(j)<0
            break
        end
    end
end
for i=1:nr_butt
    yy{i}=[fliplr(yminus{i}(1:end-1)),yplus{i}(2:end-1)];
end

CT=[];
%AZIMUTH_B={};
for j=1:nr_butt
    x_butt_end{j}=[];
    y_butt_end{j}=[];
    AZIMUTH_B{j}=[];
    CT{j}=[];
    %for i=1:fix(nr/nr_butt)
    %x=gapx+rand(1,1)*M;
    x=xx_mid(j);
    %x=xx_mid(randperm(size(xx_mid,2),1));
    %y=gapy+rand(1,1)*N;
    Y=yy{j};%(randperm(size(yy{j},2),size(yy{j},2)));
    for i=1:size(Y,2)
        y=Y(i);
        length=SPACE(j)*3;
        %length=length_dist(randperm(size(length_dist,1),1));
        azimuth=azimuth_dist(randperm(size(azimuth_dist,1),1));
        [x1,x2,y1,y2]=voxelization2d_noplot(pixel,x,y,length,azimuth);
        %[BINARY,x1,x2,y1,y2]=voxelization2d(binary,MM,NN,pixel,x,y,length,azimuth);
        binary=BINARY;
        AZIMUTH_B{j}=[AZIMUTH_B{j},azimuth];
        x_butt_end{j}=[x_butt_end{j},x1,x2];
        y_butt_end{j}=[y_butt_end{j},y1,y2];
        hold on
        CT{j}=[CT{j};length,azimuth];
    end
end


%-------------------INTERSECTION-------------------------------------------
%>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
%<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
for i=1:size(xtoll,2)
    x_inter{i}=[];
    y_inter{i}=[];
    for j=1:size(xtoll{i},1)
        x_inter{i}=[x_inter{i},xtoll{i}(j,:),NaN];
        y_inter{i}=[y_inter{i},ytoll{i}(j,:),NaN];
    end
end
P1_B=[];
P2_B=[];
ct_horiz=[];
for j=1:nr_butt
       L2=[x_inter{j};y_inter{j}];
       L3=[x_inter{j+1};y_inter{j+1}]; %l2 and l3 are face cleats
       
       P=[];
    for i=1:size(yy{j},2)
       L1=[x_butt_end{j}(i*2-1),x_butt_end{j}(i*2);y_butt_end{j}(i*2-1),y_butt_end{j}(i*2)]; %l1 is butt cleats
       PP1 = InterX(L1,L2);
       PP2 = InterX(L1,L3);
       if (isempty(PP1)==0 && isempty(PP2)==0);
       P=[PP1,PP2];
       x=mean(P(1,:));
       y=mean(P(2,:));
       length=sqrt((P(1,1)-P(1,2))^2+(P(2,1)-P(2,2))^2);
       BINARY=voxelization2d(binary,MM,NN,pixel,x,y,length,CT{j}(i,2));
       binary=BINARY;
       %[binary]=voxelization2d_end(binary,MM,NN,pixel,P(1,:),P(2,:),CT{j}(1),CT{j}(2));
       %plot(P(1,:),P(2,:));
       hold on
       P1_B=[P1_B;PP1',0];
       P2_B=[P2_B;PP2',0];
       %PP=[PP,P];
       ct_horiz=[ct_horiz;x,y,length,CT{j}(i,2)];
       else end
    end
end
ct=[ct_vert;ct_horiz];
length_horiz_total=sum(sum(logical(load('segmentedsq_horizental_final.txt'))));
bin=binary(MM/2-m/2:MM/2+m/2-1,NN/2-n/2:NN/2+n/2-1);
length_horiz_check=sum(sum(bin))-length_vert_check;

axis([(M-m*pixel)/2 (M-(M-m*pixel)/2) (N-n*pixel)/2 (N-(N-n*pixel)/2) 0 H]);
axis equal

dip_dist=load('left_vertical_orientation.txt');%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
p_mid_b={};
for i=1:size(yy,2)
    p_mid_b{i}=[xx_mid(i)*ones(size(yy{:,i},2),1),yy{:,i}',zeros(size(yy{:,i},2),1)];
end

for j=1:nr_butt
    x_butt_end{j}=[];
    y_butt_end{j}=[];
    %CT{j}=[];
    %for i=1:fix(nr/nr_butt)
    %x=gapx+rand(1,1)*M;
    x=xx_mid(j);
    %x=xx_mid(randperm(size(xx_mid,2),1));
    %y=gapy+rand(1,1)*N;
    Y=yy{j};%(randperm(size(yy{j},2),size(yy{j},2)));
    for i=1:size(Y,2)
        y=Y(i);
        length=SPACE(j)*3;
        %length=length_dist(randperm(size(length_dist,1),1));
        %azimuth=azimuth_dist(randperm(size(azimuth_dist,1),1));
        azimuth=AZIMUTH_B{j}(i);
        [x1,x2,y1,y2]=voxelization2d_noplot(pixel,x,y,length,azimuth);
        %[BINARY,x1,x2,y1,y2]=voxelization2d(binary,MM,NN,pixel,x,y,length,azimuth);
        binary=BINARY;
        %AZIMUTH_B=[AZIMUTH_B,azimuth];
        x_butt_end{j}=[x_butt_end{j},x1,x2];
        y_butt_end{j}=[y_butt_end{j},y1,y2];
        hold on
        %CT{j}=[CT{j};length,azimuth];
    end
end


%intersection
for i=1:size(xtoll_1,2)
    x_inter{i}=[];
    y_inter{i}=[];
    for j=1:size(xtoll_1{i},1)
        x_inter{i}=[x_inter{i},xtoll_1{i}(j,:),NaN];
        y_inter{i}=[y_inter{i},ytoll_1{i}(j,:),NaN];
    end
end
P3_B=[];
P4_B=[];
ct_horiz_1=[];
for j=1:nr_butt
       L2=[x_inter{j};y_inter{j}];
       L3=[x_inter{j+1};y_inter{j+1}]; %l2 and l3 are face cleats
       
       P=[];
    for i=1:size(yy{j},2)
       L1=[x_butt_end{j}(i*2-1),x_butt_end{j}(i*2);y_butt_end{j}(i*2-1),y_butt_end{j}(i*2)]; %l1 is butt cleats
       PP1 = InterX(L1,L2);
       PP2 = InterX(L1,L3);
       if (isempty(PP1)==0 && isempty(PP2)==0);
       P=[PP1,PP2];
       x=mean(P(1,:));
       y=mean(P(2,:));
       length=sqrt((P(1,1)-P(1,2))^2+(P(2,1)-P(2,2))^2);
       BINARY=voxelization3d(binary,MM,NN,h,pixel,x,y,length,CT{j}(i,2));
       binary=BINARY;
       %[binary]=voxelization2d_end(binary,MM,NN,pixel,P(1,:),P(2,:),CT{j}(1),CT{j}(2));
       %plot(P(1,:),P(2,:));
       hold on
       P3_B=[P3_B;PP1',H];
       P4_B=[P4_B;PP2',H];
       %PP=[PP,P];
       ct_horiz_1=[ct_horiz_1;x,y,length,CT{j}(i,2)];
       else end
    end
end

%----plot
for i=1:size(P1_B,1)
    x_plot=[P1_B(i,1);P2_B(i,1);P4_B(i,1);P3_B(i,1)];
    y_plot=[P1_B(i,2);P2_B(i,2);P4_B(i,2);P3_B(i,2)];
    z_plot=[P1_B(i,3);P2_B(i,3);P4_B(i,3);P3_B(i,3)];
    color=['r','g','b','c','m','y',];
    j=randi([1,6],1);
    patch(x_plot,y_plot,z_plot,color(j),'edgecolor',color(j),'facealpha',1);
    hold on
end
%%
axis([(M-m*pixel)/2 (M-(M-m*pixel)/2) (N-n*pixel)/2 (N-(N-n*pixel)/2) 0 H]);
axis equal
